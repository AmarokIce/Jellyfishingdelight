plugins {
  id 'eclipse'
  id 'idea'
  id 'maven-publish'
  id 'net.minecraftforge.gradle' version '[6.0,6.2)'
  id 'org.parchmentmc.librarian.forgegradle' version '1.+'
  id "org.spongepowered.mixin" version "0.7-SNAPSHOT"
}

version = mod_version
group = mod_group_id

base {
  archivesName = mod_id
}

mixin {
  add sourceSets.main, "jellyfishingdelight.refmap.json"
}

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"
minecraft {
  mappings channel: mapping_channel, version: mapping_version

  copyIdeResources = true

  runs {
    client {
      workingDirectory project.file('run')
      arg '-mixin.config=jellyfishingdelight.mixins.json'

      property 'forge.logging.markers', 'REGISTRIES'
      property 'forge.logging.console.level', 'debug'
      property 'forge.enabledGameTestNamespaces', mod_id

      mods {
        "${mod_id}" {
          source sourceSets.main
        }
      }
    }

    server {
      workingDirectory project.file('run')
      arg '-mixin.config=jellyfishingdelight.mixins.json'

      property 'forge.logging.markers', 'REGISTRIES'
      property 'forge.logging.console.level', 'debug'
      property 'forge.enabledGameTestNamespaces', mod_id

      mods {
        "${mod_id}" {
          source sourceSets.main
        }
      }
    }

    gameTestServer {
      workingDirectory project.file('run')
      arg '-mixin.config=jellyfishingdelight.mixins.json'

      property 'forge.logging.markers', 'REGISTRIES'
      property 'forge.logging.console.level', 'debug'
      property 'forge.enabledGameTestNamespaces', mod_id

      mods {
        "${mod_id}" {
          source sourceSets.main
        }
      }
    }

    data {
      workingDirectory project.file('run')
      arg '-mixin.config=jellyfishingdelight.mixins.json'

      property 'forge.logging.markers', 'REGISTRIES'
      property 'forge.logging.console.level', 'debug'

      args '--mod', mod_id, '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

      mods {
        "${mod_id}" {
          source sourceSets.main
        }
      }
    }
  }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
  mavenLocal()
  mavenCentral()

  maven {
    url "https://cursemaven.com"
  }

  maven {
    name = "Progwml6's maven"
    url = "https://dvs1.progwml6.com/files/maven/"
  }
  maven {
    name = "Jared's maven"
    url = "https://maven.blamejared.com/"
  }
  maven {
    name = "ModMaven"
    url = "https://modmaven.dev"
  }
}

dependencies {
  minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"

  implementation fg.deobf("curse.maven:farmers-delight-398521:5962797")

  implementation fg.deobf("curse.maven:blueprint-382216:6408581")
  implementation fg.deobf("curse.maven:jellyfishing-397703:7000303")

  implementation(annotationProcessor("io.github.llamalad7:mixinextras-common:0.2.0"))
  implementation(jarJar("io.github.llamalad7:mixinextras-forge:0.2.0")) {
    jarJar.ranged(it, "[0.2.0,)")
  }

  annotationProcessor "org.spongepowered:mixin:0.8.5:processor"
}

def resourceTargets = ['META-INF/mods.toml', 'pack.mcmeta']
def replaceProperties = [
  minecraft_version   : minecraft_version, minecraft_version_range: minecraft_version_range,
  forge_version       : forge_version, forge_version_range: forge_version_range,
  loader_version_range: loader_version_range,
  mod_id              : mod_id, mod_name: mod_name, mod_license: mod_license, mod_version: mod_version,
  mod_authors         : mod_authors, mod_description: mod_description
]
processResources {
  inputs.properties replaceProperties
  replaceProperties.put 'project', project

  filesMatching(resourceTargets) {
    expand replaceProperties
  }
}

jar {
  manifest {
    attributes([
      "Specification-Title"     : mod_id,
      "Specification-Vendor"    : mod_authors,
      "Specification-Version"   : "1", // We are version 1 of ourselves
      "Implementation-Title"    : project.name,
      "Implementation-Version"  : project.jar.archiveVersion,
      "Implementation-Vendor"   : mod_authors,
      "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
      "MixinConfigs"            : "jellyfishingdelight.mixins.json"
    ])
  }
}

jar.finalizedBy('reobfJar')

publishing {
  publications {
    mavenJava(MavenPublication) {
      artifact jar
    }
  }
  repositories {
    maven {
      url "file://${project.projectDir}/mcmodsrepo"
    }
  }
}

tasks.withType(JavaCompile).configureEach {
  options.encoding = 'UTF-8'
}
